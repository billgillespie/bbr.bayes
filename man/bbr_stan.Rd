% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bbr-stan.R
\name{bbr_stan}
\alias{bbr_stan}
\alias{bbi_stan_model}
\alias{bbi_stan_gq_model}
\title{Stan models in \code{bbr}}
\description{
This page provides an overview of the basic structure of Stan models in
\code{bbr}. The main entry point for interacting with Stan models is the
\code{bbi_stan_model} object. With it, you can create a new model on disk from
"scaffold" files, copy a new model from an existing one, jump to model files
of interest, and submit models. The Details section contains information
about the model structure and the necessary files that will exist on disk for
any \code{bbi_stan_model}.
}
\details{
\subsection{Model Structure}{

\strong{\verb{<run>}} - The "run" is, in some sense, the "name" of a given model.
Practically, it will correspond to the model directory name, the base name of
the bbr-created YAML (\verb{<run>.yaml}), as well as the base name for some files
in that directory. Calling \code{\link[bbr:get_model_id]{bbr::get_model_id()}} on a model object will
return \verb{<run>} as a string. The \code{bbi_log_df} tibbles also all contain a run
column which is populated by calling \code{basename(.mod$absolute_model_path)} for
each model. Note: this is \emph{not} actually stored in the model object because
it can be unequivocally extracted as just described.

\strong{\code{absolute_model_path}} - Like the \code{bbi_nonmem_model} object, the
\code{bbi_stan_model} object will carry around only an absolute path to the model
directory. This will point to the model directory (named \verb{<run>}) containing
all of the files described below, as well as a \verb{<run>.yaml} file that \code{bbr}
uses to persist model metadata. A model is loaded or created by passing a
relative path to this directory to either \code{\link[bbr:read_model]{bbr::read_model()}} or
\code{\link[bbr:new_model]{bbr::new_model()}}, both of which return the \code{bbi_stan_model} object. When
this object is created, it checks the model directory for the relevant files
and populates \code{absolute_model_path}.
}

\subsection{Necessary Files}{

All of the files described below will exist inside the model directory named
\verb{<run>}. If you call \code{new_model(..., .model_type = "stan")} without any of
these files, template "scaffold" files for all of them will be created in the
newly created model directory.

\strong{\verb{<run>.stan}} - The Stan file.

\strong{\verb{<run>-stanargs.R}} - Contains a named list with all of the arguments that
will be passed through to the \link[cmdstanr:model-method-sample]{$sample()}
method of \link[cmdstanr:CmdStanModel]{cmdstanr::CmdStanModel}. See \code{\link[=set_stanargs]{set_stanargs()}} for details on
modifying.

\strong{\verb{<run>-standata.R}} - Contains all necessary R code to read in
any source data and transform them to a Stan-ready data object (list).
\itemize{
\item Contains only one function, called \code{make_standata(.dir)}, that takes a
single argument and returns the data list to pass to the
\link[cmdstanr:model-method-sample]{CmdStanModel$sample()}.
\item The \code{.dir} argument will be the directory containing the script. This is
used to find data files for loading, for example
\code{read_csv(file.path(.dir, "..", "..", "data", "derived", "my_data.csv"))}
\item Can be called (by \code{\link[=build_data]{build_data()}}) to generate the data for model
submission or to compare the resulting data to previously saved data on
disk.
}
}

\subsection{Other Files and Directories}{

There will be several other things created in the model directory, as the
model is run or as it prepares to run.

\strong{\verb{<run>-init.R}} - This file contains all necessary R code to create the
initial values passed to the cmdstanr's
\link[cmdstanr:model-method-sample]{$sample()} method. This file is a lot like
\verb{<run>-standata.R} (discussed above) and a scaffold can be created with
\code{\link[=add_staninit_file]{add_staninit_file()}}.
\itemize{
\item Contains only one function, called \code{make_init(.data)}, that takes a
single argument and returns something that can be passed to the \code{init}
argument of \verb{$sample()}. There are several options; see the
\link[cmdstanr:model-method-sample]{$sample()} documentation for details.
\item The object returned from \code{make_standata()} will be passed to the \code{.data}
argument of \code{make_init()}.
\item Will be called internally by \code{bbr} and the result passed as the \code{init}
argument to \verb{$sample()}.
\item Note that \verb{$sample()} supports passing
\emph{"A function that returns a single list..."}. If you intend to use this
option, your \code{make_init()} function must return \emph{the function} described,
\emph{not} the "single list...".
\item Note that this file will not be included when you're defining a model for
\emph{standalone} generated quantities. See "Standalone Generated Quantities"
section below for more information.
}

\strong{\verb{<run>}} - This is the binary file created when the \verb{<run>.stan} file is
compiled by \code{cmdstan}. We \code{.gitignore} this automatically.

\strong{\verb{<run>-output}} - This directory is created by \code{bbr}. It is where the
posteriors will be saved (currently as CSV’s) and also where the
\code{bbi_config.json} is saved when the model run finishes successfully. Note
that we \emph{don’t} call this \verb{<run>} (as is done in NONMEM) for two primary
reasons:
\itemize{
\item It is more informative to call it \verb{<run>-output} to distinguish it from
all the other files and directories that start with \verb{<run>}.
\item There is also the binary called \verb{<run>} (previously mentioned) that could
cause confusion. In fact, there was a bug in \code{cmdstanr} in February 2021
involving exactly this scenario.
}

\verb{<run>-output/bbi_config.json} - This file is created by \code{bbr} when a model
run finishes successfully. It stores some configuration information about the
run, as well as the md5 hashes of the necessary files. These hashes are later
used (by \code{\link[bbr:check_up_to_date]{bbr::check_up_to_date()}} to check whether the files have changed
since the model was run, primarily for reproducibility purposes.
}

\subsection{Some Helper Functions}{
\itemize{
\item \strong{\code{\link[=check_stan_model]{check_stan_model()}}} (mentioned above) - Checks for the necessary files
before running or copying the model.
\item \strong{\code{\link[bbr:build_path_from_model]{bbr::build_path_from_model()}}} - Builds the absolute path to a file in
the model folder from a model object and a suffix.
\item \strong{\code{\link[=add_stanmod_file]{add_stanmod_file()}}, \code{\link[=add_standata_file]{add_standata_file()}}, \code{\link[=add_staninit_file]{add_staninit_file()}},
\code{\link[=add_stan_fitted_params_file]{add_stan_fitted_params_file()}}} - Helpers for adding one of the necessary
files to the model folder.
\item \strong{\code{\link[=open_stanmod_file]{open_stanmod_file()}}, \code{\link[=open_standata_file]{open_standata_file()}}, \code{\link[=open_staninit_file]{open_staninit_file()}},
\code{\link[=open_stan_fitted_params_file]{open_stan_fitted_params_file()}}} - Helpers for opening files within the
model directory.
\item \strong{\code{\link[bbr:model_diff]{bbr::model_diff()}}} - Compare necessary files between two models.
Defaults to comparing \verb{<run>.stan} files.
\item Also has many of the same helpers as \code{bbi_nonmem_model} objects:
\code{\link[bbr:tags_diff]{bbr::tags_diff()}}, \code{\link[bbr:modify_tags]{bbr::add_tags()}}, \code{\link[bbr:modify_notes]{bbr::add_notes()}},
\code{\link[bbr:get_path_from_object]{bbr::get_model_path()}}, \code{\link[bbr:get_path_from_object]{bbr::get_output_dir()}}, \code{\link[bbr:get_model_id]{bbr::get_model_id()}}
}
}

\subsection{Standalone Generated Quantities}{

Stan supports generating quantities of interest from existing posterior
samples (see \href{https://mc-stan.org/docs/stan-users-guide/stand-alone-generated-quantities-and-ongoing-prediction.html}{Stan user's guide}).
\pkg{cmdstanr} exposes this through the
\link[cmdstanr:model-method-generate-quantities]{$generate_quantities()} of
\link[cmdstanr:CmdStanModel]{cmdstanr::CmdStanModel}.

\emph{Note:} The information below applies to \emph{standalone} generated quantities.
If the model defines generated quantities that are produced at the same time
as the MCMC samples, the model will have the structure defined above.

In \code{bbr}, models for standalone generated quantities are defined via the
\code{bbi_stan_gq_model} object, a subclass of \code{bbi_stan_model}. On the file
system, these models look very similar to regular Stan models, with the
following differences:
\itemize{
\item the "model_type" value in the model YAML is "stan_gq" instead of "stan"
\item there is no \verb{<run>-init.R} file;
\link[cmdstanr:model-method-generate-quantities]{$generate_quantities()} does
not have an \code{init} argument.
\item there is a \verb{<run>-fitted-params.R} file. This file must define a function,
\code{make_fitted_params}, that takes a single argument, the model object. The
function can return any value accepted for the \code{fitted_params} argument of
\link[cmdstanr:model-method-generate-quantities]{$generate_quantities()}.
}

"stan_gq" models can be created fresh with \code{new_model(..., .model_type = "stan_gq")}. However, for the more common case where the "stan_gq" model is
derived from an existing "stan" model, you can use the
\code{\link[=copy_model_as_stan_gq]{copy_model_as_stan_gq()}} helper, which takes care of copying over the
relevant files and setting up a default \verb{<run>-fitted-params.R} that returns
the paths to the parent model's posteriors.

To run a "stan_gq" model, pass the \code{bbi_stan_gq_model} object to
\link[=stan_submit_model]{submit_model()}, which will use the model files to
construct a call to
\link[cmdstanr:model-method-generate-quantities]{CmdStanModel$generate_quantities()}.
}
}
